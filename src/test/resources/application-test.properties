spring.application.name=fos-auth

spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.platform=h2

spring.jpa.hibernate.ddl-auto=create-drop

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

#server.port=9000
#
#logging.level.org.springframework.security=trace
#
#spring.security.user.name=user
#spring.security.user.password=password
#
#################
#
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-id=client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-secret=secret
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-authentication-methods=client_secret_basic
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types=authorization_code,refresh_token
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.redirect-uris=http://localhost:4200/auth-callback
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.post-logout-redirect-uris=http://localhost:4200/login
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes=openid,email,profile
#spring.security.oauth2.authorizationserver.client.oidc-client.require-authorization-consent=true
#spring.security.oauth2.authorizationserver.client.oidc-client.require-proof-key=false
#spring.security.oauth2.authorizationserver.client.oidc-client.jwt-set-uri=http://host.docker.internal:9000/oauth2/jwks
#spring.security.oauth2.authorizationserver.issuer-uri=http://localhost:8085
#
##Google
#spring.security.oauth2.client.registration.google.client-id=653875561290-jtd5p8sda5ulj7ul6s2dofkmq7k1neht.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.client-secret=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
#spring.security.oauth2.client.registration.google.scope=openid,email,profile
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:9000/login/oauth2/code/google
#spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_post
#
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
#spring.security.oauth2.client.provider.google.jwt-set-uri=https://www.googleapis.com/oauth2/v3/certs
#spring.security.oauth2.client.provider.google.user-name-attribute=sub
#
##Github
#spring.security.oauth2.client.registration.github.client-id=Ov23litiK006HYqyvgal
#spring.security.oauth2.client.registration.github.client-secret=101a3d8c839f2fe6ae5fb66b0955812f39d864c6
#spring.security.oauth2.client.registration.github.scope=read:user,user:email
#spring.security.oauth2.client.registration.github.redirect-uri=http://localhost:9000/login/oauth2/code/github
#spring.security.oauth2.client.registration.github.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.github.client-authentication-method=client_secret_post
#
#spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
#spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
#spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
#spring.security.oauth2.client.provider.github.user-name-attribute=login
#
## CORS
#cors.allowed-origins=http://localhost:8080, http://localhost:4200
