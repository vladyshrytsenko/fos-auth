spring.application.name=fos-auth

spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

server.port=9000

logging.level.org.springframework.security=trace

spring.security.user.name=user
spring.security.user.password=password

############

spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-id=${CLIENT_OIDC_CLIENT_REGISTRATION_CLIENT_ID}
spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-secret=${CLIENT_OIDC_CLIENT_REGISTRATION_CLIENT_SECRET}
spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-authentication-methods=client_secret_basic
spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types=authorization_code,refresh_token
spring.security.oauth2.authorizationserver.client.oidc-client.registration.redirect-uris=${CLIENT_OIDC_CLIENT_REGISTRATION_REDIRECT_URIS}
spring.security.oauth2.authorizationserver.client.oidc-client.registration.post-logout-redirect-uris=${CLIENT_OIDC_CLIENT_REGISTRATION_POST_LOGOUT_REDIRECT_URIS}
spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes=openid,email,profile
spring.security.oauth2.authorizationserver.client.oidc-client.require-authorization-consent=true
spring.security.oauth2.authorizationserver.client.oidc-client.require-proof-key=false
spring.security.oauth2.authorizationserver.client.oidc-client.jwt-set-uri=${CLIENT_OIDC_CLIENT_JWT_SET_URI}

#Google
spring.security.oauth2.client.registration.google.client-id=${CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri=${CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_post

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.jwt-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.provider.google.user-name-attribute=sub

#Github
spring.security.oauth2.client.registration.github.client-id=${CLIENT_REGISTRATION_GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user,user:email
spring.security.oauth2.client.registration.github.redirect-uri=${CLIENT_REGISTRATION_GITHUB_REDIRECT_URI}
spring.security.oauth2.client.registration.github.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.github.client-authentication-method=client_secret_post

spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=login

# CORS
cors.allowed-origins=${CORS_ALLOWED_ORIGINS}
